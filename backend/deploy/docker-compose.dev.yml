version: "3.8"

services:
    user-service:
        build:
            context: ../services/user-service
        environment:
            DB_HOST: ${POSTGRES_HOST}
            DB_PORT: ${POSTGRES_PORT}
            DB_USER: ${POSTGRES_USER}
            DB_PASSWORD: ${POSTGRES_PASSWORD}
            DB_NAME: ${POSTGRES_DB}
            JWT_SECRET: ${JWT_SECRET}
        ports:
            - "50051:50051"
            - "8083:8083"
        networks:
            - deploy_default

    course-service:
        build:
            context: ../services/course-service
        ports:
            - "50052:50052"
        networks:
            - deploy_default

    auth-service:
        build:
            context: ../services/auth-service
        environment:
            DB_HOST: ${POSTGRES_HOST}
            DB_PORT: ${POSTGRES_PORT}
            DB_USER: ${POSTGRES_USER}
            DB_PASSWORD: ${POSTGRES_PASSWORD}
            DB_NAME: ${POSTGRES_DB}
            JWT_SECRET: ${JWT_SECRET}
        ports:
            - "50053:50053"
            - "8084:8084"
        networks:
            - deploy_default

    gateway:
        build:
            context: ../gateway
        environment:
            USER_SERVICE_URL: http://user-service:8083
            AUTH_SERVICE_URL: http://auth-service:8084
            API_GATEWAY_PORT: 8085
            JWT_SECRET: ${JWT_SECRET}
        ports:
            - "8085:8085"
        networks:
            - deploy_default
        depends_on:
            - user-service
            - auth-service

    postgres:
        image: postgres:14
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - "5432:5432"
        networks:
            - deploy_default
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
                ]
            interval: 10s
            timeout: 5s
            retries: 5

    migration:
        image: migrate/migrate
        command:
            [
                "-path",
                "/migrations",
                "-database",
                "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable",
                "up",
            ]
        volumes:
            - ./migrations:/migrations
        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - deploy_default

networks:
    deploy_default:
        driver: bridge

volumes:
    postgres_data:
        name: myapp_postgres_data
